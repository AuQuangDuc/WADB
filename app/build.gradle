import java.nio.file.Paths

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

def localFile = rootProject.file('local.properties')
def localProps = new Properties()
def dontRestartAdbd
if (localFile.canRead()) {
    localProps.load(localFile.newDataInputStream())
    dontRestartAdbd = localProps.get("debug.dontRestartAdbd", false)
}

android {
    compileSdkVersion target_sdk
    buildToolsVersion build_tool_version
    ndkVersion "23.1.7779620"
    defaultConfig {
        applicationId "moe.haruue.wadb"
        minSdkVersion min_sdk
        targetSdkVersion target_sdk
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resConfigs 'de', 'id', 'it', 'ja', 'pt-rBR', 'ru', 'tr', 'zh-rCN', 'zh-rTW'
        buildConfigField "String", "GITHUB_URL", "\"https://github.com/RikkaApps/WADB\""
        buildConfigField "String", "LICENSE", "\"Apache License 2.0\""
        buildConfigField "String", "TRANSLATION_URL", "\"https://rikka.app/contribute_translation/\""
        buildConfigField "String", "COPYRIGHT", "\"Copyright Â© Haruue Icymoon, PinkD, Rikka\""
        buildConfigField "boolean", "DONOT_RESTART_ADBD", "${dontRestartAdbd}" // set it true to prevent restart adbd (for debugging)
        setProperty("archivesBaseName", "wadb-v${versionName}")
        externalNativeBuild {
            cmake {
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
        }
    }
    signingConfigs {
        sign
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.sign
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.sign
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }
    packagingOptions {
        exclude '/META-INF/*.version'
        exclude '/META-INF/*.version'
        exclude '/META-INF/*.kotlin_module'
        exclude '/kotlin/**'
    }
    lintOptions.checkReleaseBuilds false
    dependenciesInfo.includeInApk false
}

def optimizeReleaseResources = task('optimizeReleaseResources').doLast {
    def aapt2 = Paths.get(project.android.sdkDirectory.path, 'build-tools', project.android.buildToolsVersion, 'aapt2')
    def zip = Paths.get(project.buildDir.path, 'intermediates',
            'processed_res', 'release', 'out', "resources-release.ap_")
    def optimized = new File("${zip}.opt")
    def cmd = exec {
        commandLine aapt2, 'optimize', '--collapse-resource-names',
                '--shorten-resource-paths',
                '-o', optimized, zip
        ignoreExitValue false
    }
    if (cmd.exitValue == 0) {
        delete(zip)
        optimized.renameTo("$zip")
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'processReleaseResources') {
        task.finalizedBy optimizeReleaseResources
    }
}

android.applicationVariants.all { variant ->
    variant.outputs.all {
        if (variant.getBuildType().isMinifyEnabled()) {
            variant.assembleProvider.get().doLast {
                copy {
                    from variant.mappingFile
                    into "release"
                    rename { String fileName ->
                        "mapping-${variant.versionCode}.txt"
                    }
                }
                copy {
                    from outputFile
                    into "release"
                }
            }
        }
    }
}

repositories {
    maven {
        url 'https://jitpack.io'
        content {
            includeGroup("com.github.topjohnwu.libsu")
        }
    }
}

configurations.all {
    exclude group: 'androidx.appcompat', module: 'appcompat'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    compileOnly project(':hidden')

    implementation 'com.google.android.material:material:1.2.0'
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.fragment:fragment-ktx:1.3.6'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.preference:preference-ktx:1.1.1'

    implementation "dev.rikka.rikkax.appcompat:appcompat:1.2.0-rc01"
    implementation "dev.rikka.rikkax.core:core:1.3.2"
    implementation 'dev.rikka.rikkax.html:html-ktx:1.1.2'
    implementation 'dev.rikka.rikkax.material:material:1.6.5'
    implementation 'dev.rikka.rikkax.recyclerview:recyclerview-ktx:1.2.2'
    implementation 'dev.rikka.rikkax.widget:borderview:1.0.1'

    def libsuVersion = '3.1.2'
    implementation "com.github.topjohnwu.libsu:core:${libsuVersion}"

    def shizuku_version = '11.0.3'
    implementation "dev.rikka.shizuku:api:${shizuku_version}"
}


def signFile = rootProject.file('signing.properties')
def signProps = new Properties()
if (signFile.canRead()) {
    signProps.load(new FileInputStream(signFile))
    if (signProps != null) {
        android.signingConfigs.sign.storeFile file(signProps['KEYSTORE_FILE'])
        android.signingConfigs.sign.storePassword signProps['KEYSTORE_PASSWORD']
        android.signingConfigs.sign.keyAlias signProps['KEYSTORE_ALIAS']
        android.signingConfigs.sign.keyPassword signProps['KEYSTORE_ALIAS_PASSWORD']
    } else {
        println 'some entries in \'signing.properties\' not found!'
    }
} else {
    println '\'signing.properties\' not found!'
}

